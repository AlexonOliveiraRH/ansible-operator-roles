---
# tasks file for Nexus

- name: Set OpenShift Objects for Nexus to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/service_account.j2
  - ./templates/service.j2
  - ./templates/registry_service.j2
  - ./templates/route.j2
  - ./templates/registry_route.j2
  - ./templates/persistent_volume_claim.j2

- name: Set Nexus Deployment to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    definition: "{{ lookup('template', './templates/deployment.j2' ) | from_yaml }}"
  register: r_nexus_changed

- name: Wait until application is available
  when:
    - _nexus_state == "present"
    - _nexus_wait_for_init|bool
  k8s_facts:
    api_version: apps/v1
    kind: Deployment
    name: "{{ _nexus_name }}"
    namespace: "{{ _nexus_namespace }}"
  register: r_deployment
  until:
  - r_deployment.resources[0].status.availableReplicas is defined
  - r_deployment.resources[0].status.availableReplicas == 1
  retries: 50
  delay: 10
  ignore_errors: yes

# Get Nexus Route
- name: Get Nexus Route Hostname
  when:
  - _nexus_state == "present"
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ _nexus_name }}"
    namespace: "{{ _nexus_namespace }}"
  register: r_route

- name: Store Nexus Route Hostname
  when:
  - _nexus_state == "present"
  set_fact:
    _nexus_actual_route: "{{ r_route.resources[0].status.ingress[0].host }}"

- name: Perform Initial Nexus Configuration
  include_tasks: setup.yml
  when: r_nexus_changed.method == "create"
  vars:
    nexus_url: "{{ 'http' if not _nexus_ssl|d(False)|bool else 'https' }}://{{ _nexus_actual_route }}"
