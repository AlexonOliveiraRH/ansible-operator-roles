---
# tasks file for Gitea
- name: Set Fallback Facts for gitea_route
  set_fact:
    gitea_route: "dummy"

- name: Set Gitea Service Account to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    definition:
      kind: ServiceAccount
      apiVersion: v1
      metadata:
        name: "{{ _gitea_name }}"
        namespace: "{{ _gitea_namespace }}"

- name: Set Gitea Service to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: "{{ _gitea_name }}"
        namespace: "{{ _gitea_namespace }}"
        labels:
          app: "{{ _gitea_name }}"
      spec:
        selector:
          app: "{{ _gitea_name }}"
        ports:
        - name: gitea
          port: 3000
          protocol: TCP
          targetPort: 3000
        sessionAffinity: None
        type: ClusterIP

- name: Set Gitea Route to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    definition: "{{ lookup('template', './templates/gitea_route.j2') | from_yaml }}"
  register: gitea_route_result

- name: Store Gitea Route Hostname
  set_fact:
    gitea_route: "{{ gitea_route_result.result.spec.host }}"
  when: gitea_route_result.method == "create" or gitea_route_result.method == "patch"

- name: Set Gitea PersistentVolumeClaim to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: "{{ _gitea_name }}-pvc"
        namespace: "{{ _gitea_namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ _gitea_volume_size }}"

- name: Set Gitea ConfigMap to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    definition: "{{ lookup('template', './templates/gitea_config_map.j2') | from_yaml }}"

- name: Set Gitea Pod to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ _gitea_name }}"
        namespace: "{{ _gitea_namespace }}"
        labels:
          app: "{{ _gitea_name }}"
      spec:
        serviceAccountName: "{{ _gitea_name }}"
        containers:
        - image: "{{ _gitea_image }}:{{ _gitea_image_tag }}"
          imagePullPolicy: IfNotPresent
          name: gitea
          ports:
          - containerPort: 3000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 3
            timeoutSeconds: 1
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 3
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            request:
              cpu: "{{ _gitea_cpu_request }}"
              memory: "{{ _gitea_memory_request}}"
            limits:
              cpu: "{{ _gitea_cpu_limit}}"
              memory: "{{ _gitea_memory_limit }}"
          volumeMounts:
          - name: gitea-repositories
            mountPath: /gitea-repositories
          - name: gitea-config
            mountPath: /home/gitea/conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: gitea-repositories
          persistentVolumeClaim:
            claimName: "{{ _gitea_name }}-pvc"
        - name: gitea-config
          configMap:
            name: "{{ _gitea_name }}-config"
            items:
              - key: app.ini
                path: app.ini

- name: Pause to wait for pod to be in the system
  when:
    - _gitea_state == "present"
    - _gitea_wait_for_init|bool
  pause:
    seconds: 5

- name: Verify that the Gitea Pod is running
  when:
    - _gitea_state == "present"
    - _gitea_wait_for_init|bool
  k8s:
    api_version: v1
    kind: Pod
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: gitea_pod
  until:
  - gitea_pod.result.status.phase == "Running"
  retries: 50
  delay: 10
  changed_when: false

- name: Verify that the Gitea Pod is ready
  when:
    - _gitea_state == "present"
    - _gitea_wait_for_init|bool
  k8s:
    api_version: v1
    kind: Pod
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: gitea_pod
  until:
  - gitea_pod.result.status.containerStatuses[0].ready|d(False)|bool
  retries: 25
  delay: 5
  changed_when: false
